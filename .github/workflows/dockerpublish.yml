name: Docker Image CI

on:
    push:
        branches: helldar

jobs:
    buildx:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php_version: [ 7.3.22, 7.4.10 ]
        steps:
            -   name: Checkout
                uses: actions/checkout@v2
            -   name: Prepare
                id: prepare
                env:
                    PHP_VERSION: ${{ matrix.php_version }}
                run: |
                    DOCKER_IMAGE=helldar/laradock-workspace
                    DOCKER_PLATFORMS=linux/amd64,linux/arm,linux/arm64
                    VERSION_LATEST=${PHP_VERSION:0:1}.${PHP_VERSION:2:1}
                    VERSION_MAJOR=${PHP_VERSION:0:1}.${PHP_VERSION:2:1}
                    VERSION_MINOR=${PHP_VERSION}
                    
                    echo ::set-output name=docker_image::${DOCKER_IMAGE}
                    echo ::set-output name=version_latest::${VERSION_LATEST}
                    echo ::set-output name=version_major::${VERSION_MAJOR}
                    echo ::set-output name=version_minor::${VERSION_MINOR}
                    
                    echo ::set-output name=buildx_args_latest::--platform ${DOCKER_PLATFORMS} \
                        --build-arg VERSION=latest-${VERSION_LATEST} \
                        --build-arg PHP_VERSION=${VERSION_LATEST} \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --cache-from="type=registry,ref=${VERSION_LATEST}-${GITHUB_SHA::8}" \
                        --cache-to=="type=registry,ref=${VERSION_LATEST}-${GITHUB_SHA::8}" \
                        --tag ${DOCKER_IMAGE}:latest-${VERSION_LATEST} --file ./Dockerfile .
                    echo ::set-output name=buildx_args_major::--platform ${DOCKER_PLATFORMS} \
                        --build-arg VERSION=${VERSION_MAJOR} \
                        --build-arg PHP_VERSION=${VERSION_MAJOR} \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --cache-from="type=registry,ref=${VERSION_MAJOR}-${GITHUB_SHA::8}" \
                        --cache-to=="type=registry,ref=${VERSION_MAJOR}-${GITHUB_SHA::8}" \
                        --tag ${DOCKER_IMAGE}:${VERSION_MAJOR} --file ./Dockerfile .
                    echo ::set-output name=buildx_args_minor::--platform ${DOCKER_PLATFORMS} \
                        --build-arg VERSION=${VERSION_MINOR} \
                        --build-arg PHP_VERSION=${VERSION_MINOR} \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --cache-from="type=registry,ref=${VERSION_MINOR}-${GITHUB_SHA::8}" \
                        --cache-to=="type=registry,ref=${VERSION_MINOR}-${GITHUB_SHA::8}" \
                        --tag ${DOCKER_IMAGE}:${VERSION_MINOR} --file ./Dockerfile .
            -   name: Set up Docker Buildx
                uses: crazy-max/ghaction-docker-buildx@v3.3.0
            -   name: Docker Build (latest)
                run: |
                    docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_latest }}
            -   name: Docker Build (major)
                if: success()
                run: |
                    docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_major }}
            -   name: Docker Build (minor)
                if: success()
                run: |
                    docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_minor }}
            -   name: Login to DockerHub
                if: success()
                uses: docker/login-action@v1
                with:
                    username: ${{ secrets.DOCKER_HUB_USER }}
                    password: ${{ secrets.DOCKER_HUB_PASSWORD }}
            -   name: Docker Buildx (push)
                if: success()
                run: |
                    docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_latest }}
                    docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_major }}
                    docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_minor }}
            -   name: Inspect image
                if: success()
                run: |
                    docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:latest-${{ steps.prepare.outputs.version_latest }}
                    docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version_major }}
                    docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version_minor }}
